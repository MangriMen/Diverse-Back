version: "3.9"

services:
  go-prod:
    image: ghcr.io/mangrimen/diverse-back:latest
    container_name: go
    restart: always
    env_file:
      - .env
    ports:
      - "80:3030"
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  go-test:
    image: ghcr.io/mangrimen/diverse-back:develop
    container_name: go
    restart: always
    profiles:
      - test
    env_file:
      - .env
    ports:
      - "90:3030"
    networks:
    depends_on:
      postgres:
        condition: service_healthy

  go-hot-reload:
    container_name: go
    restart: always
    profiles:
      - dev
    build:
      context: .
      dockerfile: deployments/develop/Dockerfile
    env_file:
      - .env
    ports:
      - "3030:3030"
    networks:
      - backend
    volumes:
      - ".:/app"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:14.5-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - "./scripts/postgres-initd:/docker-entrypoint-initdb.d:ro"
      - "postgres-data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    networks:
      - backend

volumes:
  postgres-data:


networks:
  backend:
    driver: bridge
