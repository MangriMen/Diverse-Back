version: "3.9"

x-nginx:
  &nginx
  container_name: diverse-nginx-$COMPOSE_PROJECT_NAME
  restart: always
  pull_policy: build
  build:
    context: .
    dockerfile: deployments/NginxReverse.Dockerfile
    target: $COMPOSE_PROJECT_NAME

x-backend:
  &backend
  container_name: diverse-backend-$COMPOSE_PROJECT_NAME
  restart: always
  pull_policy: always
  env_file: .env
  build:
    context: .
    dockerfile: deployments/Backend.Dockerfile
    target: $COMPOSE_PROJECT_NAME
  depends_on:
    postgres:
      condition: service_healthy

services:
  backend:
    <<: *backend
    image: ghcr.io/mangrimen/diverse-back:latest
    profiles: [ prod ]
    volumes:
      - "backend-data:/var/lib/backend-data"

  backend-test:
    <<: *backend
    image: ghcr.io/mangrimen/diverse-back:develop
    profiles: [ test ]
    volumes:
      - "backend-data:/var/lib/backend-data"

  backend-dev:
    <<: *backend
    profiles: [ dev ]
    ports:
      - "40000:40000"
    volumes:
      - ".:/app:rw,delegated"
      - "backend-data:/var/lib/backend-data"

  backend-testing:
    <<: *backend
    restart: "no"
    profiles: [ testing ]
    volumes:
      - ".:/app:rw,delegated"
      - "backend-data:/var/lib/backend-data"

  postgres:
    container_name: diverse-postgres-$COMPOSE_PROJECT_NAME
    image: postgres:14.5-alpine
    restart: always
    env_file: .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - "./scripts/postgres-initd:/docker-entrypoint-initdb.d:ro"
      - "postgres-data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: diverse-pgadmin-$COMPOSE_PROJECT_NAME
    image: dpage/pgadmin4
    restart: always
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT}
    volumes:
      - "pgadmin-data:/var/lib/pgadmin"

  swagger:
    container_name: diverse-swagger-$COMPOSE_PROJECT_NAME
    image: quay.io/goswagger/swagger
    restart: always
    env_file: .env
    command:
      [
        "serve",
        "swagger.yml",
        "--flavor=swagger",
        "--no-open",
        "--base-path=/api/v1/",
        "--port=$SWAGGER_PORT"
      ]
    working_dir: "/docs"
    volumes:
      - "./docs:/docs"

  nginx:
    <<: *nginx
    profiles: [ prod ]
    ports: [ "3030:80" ]

  nginx-dev:
    <<: *nginx
    profiles: [ test, dev ]
    ports: [ "3040:80" ]

volumes:
  postgres-data:
  pgadmin-data:
  backend-data:
